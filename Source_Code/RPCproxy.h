/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCproxy_H
#define RPCproxy_H

#include <thrift/TDispatchProcessor.h>
#include "RPCproxy_thrift_file_types.h"

namespace Test {

class RPCproxyIf {
 public:
  virtual ~RPCproxyIf() {}
  virtual void ping(std::string& _return, const std::string& URL) = 0;
  virtual int32_t miss_count() = 0;
  virtual int32_t byte_count() = 0;
  virtual void kill_server() = 0;
};

class RPCproxyIfFactory {
 public:
  typedef RPCproxyIf Handler;

  virtual ~RPCproxyIfFactory() {}

  virtual RPCproxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCproxyIf* /* handler */) = 0;
};

class RPCproxyIfSingletonFactory : virtual public RPCproxyIfFactory {
 public:
  RPCproxyIfSingletonFactory(const boost::shared_ptr<RPCproxyIf>& iface) : iface_(iface) {}
  virtual ~RPCproxyIfSingletonFactory() {}

  virtual RPCproxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCproxyIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCproxyIf> iface_;
};

class RPCproxyNull : virtual public RPCproxyIf {
 public:
  virtual ~RPCproxyNull() {}
  void ping(std::string& /* _return */, const std::string& /* URL */) {
    return;
  }
  int32_t miss_count() {
    int32_t _return = 0;
    return _return;
  }
  int32_t byte_count() {
    int32_t _return = 0;
    return _return;
  }
  void kill_server() {
    return;
  }
};

typedef struct _RPCproxy_ping_args__isset {
  _RPCproxy_ping_args__isset() : URL(false) {}
  bool URL :1;
} _RPCproxy_ping_args__isset;

class RPCproxy_ping_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  RPCproxy_ping_args(const RPCproxy_ping_args&);
  RPCproxy_ping_args& operator=(const RPCproxy_ping_args&);
  RPCproxy_ping_args() : URL() {
  }

  virtual ~RPCproxy_ping_args() throw();
  std::string URL;

  _RPCproxy_ping_args__isset __isset;

  void __set_URL(const std::string& val);

  bool operator == (const RPCproxy_ping_args & rhs) const
  {
    if (!(URL == rhs.URL))
      return false;
    return true;
  }
  bool operator != (const RPCproxy_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_ping_args& obj);
};


class RPCproxy_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~RPCproxy_ping_pargs() throw();
  const std::string* URL;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_ping_pargs& obj);
};

typedef struct _RPCproxy_ping_result__isset {
  _RPCproxy_ping_result__isset() : success(false) {}
  bool success :1;
} _RPCproxy_ping_result__isset;

class RPCproxy_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  RPCproxy_ping_result(const RPCproxy_ping_result&);
  RPCproxy_ping_result& operator=(const RPCproxy_ping_result&);
  RPCproxy_ping_result() : success() {
  }

  virtual ~RPCproxy_ping_result() throw();
  std::string success;

  _RPCproxy_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RPCproxy_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCproxy_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_ping_result& obj);
};

typedef struct _RPCproxy_ping_presult__isset {
  _RPCproxy_ping_presult__isset() : success(false) {}
  bool success :1;
} _RPCproxy_ping_presult__isset;

class RPCproxy_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~RPCproxy_ping_presult() throw();
  std::string* success;

  _RPCproxy_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_ping_presult& obj);
};


class RPCproxy_miss_count_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCproxy_miss_count_args(const RPCproxy_miss_count_args&);
  RPCproxy_miss_count_args& operator=(const RPCproxy_miss_count_args&);
  RPCproxy_miss_count_args() {
  }

  virtual ~RPCproxy_miss_count_args() throw();

  bool operator == (const RPCproxy_miss_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_miss_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_miss_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_miss_count_args& obj);
};


class RPCproxy_miss_count_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCproxy_miss_count_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_miss_count_pargs& obj);
};

typedef struct _RPCproxy_miss_count_result__isset {
  _RPCproxy_miss_count_result__isset() : success(false) {}
  bool success :1;
} _RPCproxy_miss_count_result__isset;

class RPCproxy_miss_count_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  RPCproxy_miss_count_result(const RPCproxy_miss_count_result&);
  RPCproxy_miss_count_result& operator=(const RPCproxy_miss_count_result&);
  RPCproxy_miss_count_result() : success(0) {
  }

  virtual ~RPCproxy_miss_count_result() throw();
  int32_t success;

  _RPCproxy_miss_count_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RPCproxy_miss_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCproxy_miss_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_miss_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_miss_count_result& obj);
};

typedef struct _RPCproxy_miss_count_presult__isset {
  _RPCproxy_miss_count_presult__isset() : success(false) {}
  bool success :1;
} _RPCproxy_miss_count_presult__isset;

class RPCproxy_miss_count_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~RPCproxy_miss_count_presult() throw();
  int32_t* success;

  _RPCproxy_miss_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_miss_count_presult& obj);
};


class RPCproxy_byte_count_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCproxy_byte_count_args(const RPCproxy_byte_count_args&);
  RPCproxy_byte_count_args& operator=(const RPCproxy_byte_count_args&);
  RPCproxy_byte_count_args() {
  }

  virtual ~RPCproxy_byte_count_args() throw();

  bool operator == (const RPCproxy_byte_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_byte_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_byte_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_byte_count_args& obj);
};


class RPCproxy_byte_count_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCproxy_byte_count_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_byte_count_pargs& obj);
};

typedef struct _RPCproxy_byte_count_result__isset {
  _RPCproxy_byte_count_result__isset() : success(false) {}
  bool success :1;
} _RPCproxy_byte_count_result__isset;

class RPCproxy_byte_count_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  RPCproxy_byte_count_result(const RPCproxy_byte_count_result&);
  RPCproxy_byte_count_result& operator=(const RPCproxy_byte_count_result&);
  RPCproxy_byte_count_result() : success(0) {
  }

  virtual ~RPCproxy_byte_count_result() throw();
  int32_t success;

  _RPCproxy_byte_count_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RPCproxy_byte_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCproxy_byte_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_byte_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_byte_count_result& obj);
};

typedef struct _RPCproxy_byte_count_presult__isset {
  _RPCproxy_byte_count_presult__isset() : success(false) {}
  bool success :1;
} _RPCproxy_byte_count_presult__isset;

class RPCproxy_byte_count_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~RPCproxy_byte_count_presult() throw();
  int32_t* success;

  _RPCproxy_byte_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_byte_count_presult& obj);
};


class RPCproxy_kill_server_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCproxy_kill_server_args(const RPCproxy_kill_server_args&);
  RPCproxy_kill_server_args& operator=(const RPCproxy_kill_server_args&);
  RPCproxy_kill_server_args() {
  }

  virtual ~RPCproxy_kill_server_args() throw();

  bool operator == (const RPCproxy_kill_server_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_kill_server_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_kill_server_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_kill_server_args& obj);
};


class RPCproxy_kill_server_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCproxy_kill_server_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_kill_server_pargs& obj);
};


class RPCproxy_kill_server_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RPCproxy_kill_server_result(const RPCproxy_kill_server_result&);
  RPCproxy_kill_server_result& operator=(const RPCproxy_kill_server_result&);
  RPCproxy_kill_server_result() {
  }

  virtual ~RPCproxy_kill_server_result() throw();

  bool operator == (const RPCproxy_kill_server_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_kill_server_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_kill_server_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_kill_server_result& obj);
};


class RPCproxy_kill_server_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RPCproxy_kill_server_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RPCproxy_kill_server_presult& obj);
};

class RPCproxyClient : virtual public RPCproxyIf {
 public:
  RPCproxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCproxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& URL);
  void send_ping(const std::string& URL);
  void recv_ping(std::string& _return);
  int32_t miss_count();
  void send_miss_count();
  int32_t recv_miss_count();
  int32_t byte_count();
  void send_byte_count();
  int32_t recv_byte_count();
  void kill_server();
  void send_kill_server();
  void recv_kill_server();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCproxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCproxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCproxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_miss_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_byte_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kill_server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCproxyProcessor(boost::shared_ptr<RPCproxyIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RPCproxyProcessor::process_ping;
    processMap_["miss_count"] = &RPCproxyProcessor::process_miss_count;
    processMap_["byte_count"] = &RPCproxyProcessor::process_byte_count;
    processMap_["kill_server"] = &RPCproxyProcessor::process_kill_server;
  }

  virtual ~RPCproxyProcessor() {}
};

class RPCproxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCproxyProcessorFactory(const ::boost::shared_ptr< RPCproxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCproxyIfFactory > handlerFactory_;
};

class RPCproxyMultiface : virtual public RPCproxyIf {
 public:
  RPCproxyMultiface(std::vector<boost::shared_ptr<RPCproxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCproxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCproxyIf> > ifaces_;
  RPCproxyMultiface() {}
  void add(boost::shared_ptr<RPCproxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return, const std::string& URL) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, URL);
    }
    ifaces_[i]->ping(_return, URL);
    return;
  }

  int32_t miss_count() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->miss_count();
    }
    return ifaces_[i]->miss_count();
  }

  int32_t byte_count() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->byte_count();
    }
    return ifaces_[i]->byte_count();
  }

  void kill_server() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kill_server();
    }
    ifaces_[i]->kill_server();
  }

};

} // namespace

#endif
