    // This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RPCproxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <string>
#include <iostream>
#include <transport/TSocket.h>
#include <fstream>
#include <vector>
#include <random>
#include "cache.h"


using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;

using namespace Test;
using namespace std;





int main(int argc, char **argv) {

  boost::shared_ptr<TSocket> socket(new TSocket("localhost", 9090));
  boost::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
  boost::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
  ifstream myReadFile;
  char *fname =new char[(string(argv[1])).size()];
  for(int i=0;i<(string(argv[1])).size();i++)
	fname[i] = string(argv[1])[i];
  myReadFile.open(string(strcat(argv[1],".txt")));
  RPCproxyClient client(protocol);
  transport->open();
  string data;
  int all_data_length=0;
  char output[100];
  vector<string> URL_list;
  if (myReadFile.is_open()) {
	while (!myReadFile.eof()) 
		{
			myReadFile >> output;
			client.ping(data,string(output));
			all_data_length=all_data_length+data.length();
		}
	}
  myReadFile.close();

  string type_arr[8]={"GD1","GDF","MAXS","FIFO","LFU","LRU","LRU_MIN","RANDOM"};
  	ofstream myfile;
	myfile.open (string(strcat(fname,"outputs.txt")),std::fstream::app);
  //cout<<" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	One cache size taken care of 	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"<<endl;
  for(int i=0;i<8;i++)
  {
	myfile<<"Hit Ratio for "<<type_arr[i]<<" is "<<calc_hit_ratio(client.miss_count(),1000)<<" and byte count ratio is "<<calc_byte_hit_ratio(client.byte_count(),all_data_length)<<endl;

  }
   myfile<<endl<<endl;
   myfile.close();
  

    try
	{
		client.kill_server();
		transport->close();
	}
  catch (apache::thrift::transport::TTransportException &tte) 
	{
         
	}


  return 0;
}

